name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint || echo "Linting issues found"

  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: coverage-${{ matrix.node-version }}
          path: coverage/
          retention-days: 5

  integration:
    name: Integration Tests with Docker Compose
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Create .env file
        run: touch .env
      - name: Build Docker image
        run: docker build -t my-app .
      - name: Start Docker Compose services
        run: docker compose up -d
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker exec postgres_db pg_isready -U library_management_989j_user; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Attempt $i: PostgreSQL not ready yet. Waiting..."
            sleep 5
          done
          echo "PostgreSQL did not become ready in time."
          docker compose logs postgres_db
          exit 1
      - name: Run integration tests
        run: npm run test:integration
      - name: Tear down Docker Compose services
        run: docker compose down
        if: always()

  deploy:
    name: Deploy to AWS EC2
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [unit, integration]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
          
      - name: Deploy to EC2
        run: |
          # Create deployment package
          npm ci
          npm run build
          tar -czf deploy.tar.gz dist/ package.json package-lock.json
          
          # Transfer files to EC2
          scp -i ~/.ssh/ec2_key.pem deploy.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
          
          # Execute deployment commands on EC2
          ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to application directory
            cd /var/www/app
            
            # Backup current version
            if [ -d "current" ]; then
              mv current previous_$(date +%Y%m%d%H%M%S)
            fi
            
            # Extract new version
            mkdir -p current
            tar -xzf /tmp/deploy.tar.gz -C current
            cd current
            
            # Install dependencies and restart service
            npm ci --production
            pm2 restart app || pm2 start npm --name "app" -- start
            
            # Clean up
            rm /tmp/deploy.tar.gz
          EOF